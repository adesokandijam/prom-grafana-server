name: "Terraform"

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check
      - name: install jq
        run: | 
          sudo apt-get -y install jq

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        

      - name: Terraform Plan
        id: plan
        #if: github.event_name == 'pull_request'
        run: terraform plan -no-color --var-file var.tfvars
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        continue-on-error: true

      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
      #       </details>
      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve --var-file var.tfvars
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      - name: parse ip into static file
        run:  terraform output -json instance_ips | sed 's/[][]//g' | sed 's/\"//g' >> tmp; tail -n 1 tmp >> playbooks/aws_hosts
      
      - name: Run playbook
        # env: 
        #   ANSIBLE_CONFIG: playbooks/ansible.cfg
        uses: dawidd6/action-ansible-playbook@v2
        with:
          # Required, playbook filepath
          playbook: main-playbook.yml
          # Optional, directory where playbooks live
          directory: ./playbooks
          # Optional, SSH private key
          key: ${{secrets.SSH_PRIVATE_KEY}}
          options: |
            --user ubuntu
            --inventory aws_hosts
          # Optional, literal inventory file contents
          